{"version":3,"sources":["components/Filter.js","services/persons.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","newFilter","setFilter","value","onChange","event","target","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonForm","newName","setNewName","newNumber","setNewNumber","setPersons","persons","setNotification","setErr","onSubmit","preventDefault","nameObject","name","phone","filter","o","length","window","confirm","old","find","person","pService","map","setTimeout","returnedName","concat","type","Person","delPerson","key","onClick","Persons","console","log","toLowerCase","includes","catch","error","n","Notification","message","style","color","flag","background","fontSize","borderStyle","borderRadius","padding","marginBottom","className","App","useState","notif","err","useEffect","start","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb5d3844.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({ newFilter, setFilter }) => {\r\n    const handleFilterChange = (event) => {\r\n        setFilter(event.target.value);\r\n    }\r\n    return (\r\n        <div>filter shown with <input value={newFilter} onChange={handleFilterChange} /></div>\r\n    )\r\n\r\n}\r\n\r\nexport default Filter\r\n","import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst del = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll: getAll, create: create, update: update, del: del }","import React from 'react'\r\nimport pService from '../services/persons'\r\n\r\nconst PersonForm = ({ newName, setNewName, newNumber, setNewNumber, setPersons, persons, setNotification, setErr }) => {\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberChange = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const addName = (event) => {\r\n        event.preventDefault()\r\n\r\n        const nameObject = {\r\n            name: newName,\r\n            phone: newNumber\r\n        }\r\n\r\n        if (persons.filter(o => o.name === newName).length > 0) {\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                const old = persons.find(person => person.name === newName)\r\n                pService.update(old.id, { ...old, phone: newNumber })\r\n                    .then(response =>\r\n                        setPersons(persons.map(person => person.id !== old.id ? person : { ...old, phone: newNumber })))\r\n                setErr(false)\r\n                setNotification(`Changed number for '${old.name}'`)\r\n                setTimeout(() => { setNotification(null) }, 5000)\r\n            }\r\n\r\n        } else {\r\n            pService\r\n                .create(nameObject)\r\n                .then(returnedName => {\r\n                    setPersons(persons.concat(returnedName))\r\n                    setNewName('')\r\n                    setNewNumber('')\r\n                    setErr(false)\r\n                    setNotification(`Added '${newName}'`)\r\n                    setTimeout(() => { setNotification(null) }, 5000)\r\n                })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={addName}>\r\n            <div>\r\n                name: <input value={newName} onChange={handleNameChange} />\r\n            </div>\r\n            <div>\r\n                number <input value={newNumber} onChange={handleNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Person = ({person, delPerson }) => {\r\n\r\n    return (\r\n        <li>{person.name} {person.phone} <button key={person.id} onClick={delPerson}>delete</button></li>\r\n    )\r\n\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\nimport pService from '../services/persons'\r\n\r\n\r\nconst Persons = ({ persons, newFilter, setPersons, setNotification, setErr }) => {\r\n\r\n    const delPerson = person => {\r\n        if (window.confirm(`Delete '${person.name}' ?`)) {\r\n            pService.del(person.id)\r\n                .catch(error => {\r\n                    setPersons(persons.filter(n => n.id !== person.id))\r\n                    setErr(true)\r\n                    setNotification(`Information of ${person.name} was already deleted from server`)        \r\n                    setTimeout(() => { setNotification(null) }, 5000)\r\n                })\r\n            setErr(false)\r\n            setPersons(persons.filter(n => n.id !== person.id))\r\n            setNotification(`Removed '${person.name}'`)\r\n            setTimeout(() => { setNotification(null) }, 5000)\r\n        }\r\n    }\r\n\r\n    return (\r\n        console.log(persons),\r\n        <ul>{persons.filter(person => person.name.toLowerCase().includes(newFilter.toLowerCase())).map(person => <Person key={person.id} person={person} delPerson={() => delPerson(person)} />)}</ul>\r\n    )\r\n\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Notification = ({ message, flag }) => {\r\n\r\n  const color = flag\r\n    ? 'red'\r\n    : 'green'\r\n\r\n  const style = {\r\n    color: color,\r\n    background: 'lightgrey',\r\n    fontSize: '20px',\r\n    borderStyle: 'solid',\r\n    borderRadius: '5px',\r\n    padding: '10px',\r\n    marginBottom: '10px'\r\n  }\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div style={style} className=\"success\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport pService from './services/persons'\nimport Notification from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newFilter, setFilter] = useState('')\n  const [notif, setNotification] = useState(null)\n  const [err, setErr] = useState(null)\n\n  useEffect(() => {\n    pService.getAll().then(start => setPersons(persons.concat(start)))\n  }, [])\n\n  console.log(persons)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notif} flag={err}/>\n      <Filter newFilter={newFilter} setFilter={setFilter} />\n      <h3>add new</h3>\n      <PersonForm newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber} setPersons={setPersons} persons={persons} setNotification={setNotification} setErr={setErr}/>\n      <h3>Numbers</h3>\n      <Persons persons={persons} newFilter={newFilter} setPersons={setPersons} setNotification={setNotification} setErr={setErr} />\n    </div>\n  )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}